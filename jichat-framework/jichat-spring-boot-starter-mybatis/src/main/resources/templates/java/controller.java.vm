package ${packageName}.controller;

import java.util.List;
import javax.servlet.http.HttpServletResponse;

import com.dream.common.core.domain.R;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.dream.common.log.annotation.Log;
import com.dream.common.log.enums.BusinessType;
import com.dream.common.security.annotation.RequiresPermissions;
import ${packageName}.api.dto.${ClassName}DTO;
import ${packageName}.api.dto.${ClassName}PageDTO;
import ${packageName}.api.vo.${ClassName}VO;
import ${packageName}.api.${ClassName}Rpc;
import ${packageName}.convert.${ClassName}Convert;
import ${packageName}.service.I${ClassName}Service;
import com.dream.common.core.web.controller.BaseController;
import com.dream.common.core.utils.poi.ExcelUtil;
#if($table.crud || $table.sub)
import com.dream.common.core.web.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${businessName}")
@Api(value = "${functionName}", tags = {"${functionName}管理"})
public class ${ClassName}Controller extends BaseController implements ${ClassName}Rpc{

    @Autowired
    private I${ClassName}Service ${className}Service;

    /**
     * 分页查询查询${functionName}列表
     */
    @ApiOperation("分页查询${functionName}列表")
    @RequiresPermissions("${permissionPrefix}:list")
    @GetMapping("/list")
    #if($table.crud || $table.sub)
    public TableDataInfo list(${ClassName}PageDTO ${className}PageDTO) {
        startPage();
        List<${ClassName}VO> list = ${className}Service.select${ClassName}List(${className}PageDTO);
        return getDataTable(list);
    }
    #elseif($table.tree)
    public R<${ClassName}> list(${ClassName}PageDTO ${className}PageDTO) {
        List<${ClassName}VO> list = ${className}Service.select${ClassName}List(${className}PageDTO);
        return  R.ok(list);
    }
    #end

    /**
     * 导出${functionName}列表
     */
    @ApiOperation("导出${functionName}列表")
    @RequiresPermissions("${permissionPrefix}:export")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName}PageDTO ${className}PageDTO) {
        List<${ClassName}VO> list = ${className}Service.select${ClassName}List(${className}PageDTO);
        ExcelUtil<${ClassName}VO> util = new ExcelUtil<>(${ClassName}VO. class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    /**
     * 获取${functionName}详细信息
     */
    @Override
    @ApiOperation("获取${functionName}详细信息")
    @RequiresPermissions("${permissionPrefix}:get")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public R<${ClassName}VO> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.ok(${ClassName}Convert.INSTANCE.convert(${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField})));
    }

    /**
     * 新增${functionName}
     */
    @Override
    @ApiOperation("新增${functionName}")
    @RequiresPermissions("${permissionPrefix}:add")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public R<Boolean> add(@RequestBody ${ClassName}DTO ${className}DTO) {
        ${className}Service.insert${ClassName}(${className}DTO);
        return R.ok();
    }

    /**
     * 修改${functionName}
     */
    @ApiOperation("修改${functionName}")
    @RequiresPermissions("${permissionPrefix}:edit")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public R<Boolean> edit(@RequestBody ${ClassName}DTO ${className}DTO) {
        ${className}Service.update${ClassName}(${className}DTO);
        return R.ok();
    }

    /**
     * 删除${functionName}
     */
    @ApiOperation("删除${functionName}")
    @RequiresPermissions("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public R<Boolean> remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        ${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s);
        return R.ok();
    }
}
